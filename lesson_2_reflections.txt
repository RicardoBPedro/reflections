What happens when you initialize a repository? Why do you need to do it?
 - It's create a empty folder named .git. To store the metadatas.

How is the staging area different from the working directory and the repository? What value do you think it offers?
 - There is a place where keep de log of changes that I've done in the file. It gives me a bigger integrity operation.

How can you use the staging area to make sure you have one commit per logical change?
 - Use git status and git diff makes me sure about how many commit I do.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
 - Branches helps when you have to do a second model off the game as portuguese version or hard-mode.

How do the diagrams help you visualize the branch structure?
 - It helps me to see easyly who is the parent commits. 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
 - To put together all the changes of the two branchs. To know wich commit can be reach for  each other.

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
 - You can get a conflict in the branch commits so manually you can fix this.

Commands:
git add = Add a file to the staging area
git commit = Commit the files from the staging area to the repository 
git status = Show which files are in the staging area, and which files from the working directory are not part of the repository    
git diff = Git diff without arguments is comparing the working directory with the staging area
git diff --staged = Compare the staging area with the repository
git reset --hard = Undo all changes! There is no rollback for this, so be carefull!
git checkout master = Restore the "Head" to the latest check-in (this will be part of a later lesson/module)
git log --graph --oneline <branch1> <branch2> = Show a visual representation of the commit history within different branches
git checkout -b new_branch_name = Creates a new branch and do a checkout on this branch in one call instead of git branch new_branch_name and git checkout new_branch_name
git merge branch1 branch2 = Merge two branches, branch2 get merged into branch1
git branch -d name = Remove the branch with the specified name
git show commit Id = Show the changes made in this commit compared to the previous version. This is working even after merging.